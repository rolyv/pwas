#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[System.Data.Linq.Mapping.DatabaseAttribute(Name="PWAS_DB")]
public partial class PWASTablesDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertRole(Role instance);
  partial void UpdateRole(Role instance);
  partial void DeleteRole(Role instance);
  partial void InsertRolePermission(RolePermission instance);
  partial void UpdateRolePermission(RolePermission instance);
  partial void DeleteRolePermission(RolePermission instance);
  partial void InsertUser(User instance);
  partial void UpdateUser(User instance);
  partial void DeleteUser(User instance);
  partial void InsertOrder(Order instance);
  partial void UpdateOrder(Order instance);
  partial void DeleteOrder(Order instance);
  partial void InsertPrintRun(PrintRun instance);
  partial void UpdatePrintRun(PrintRun instance);
  partial void DeletePrintRun(PrintRun instance);
  #endregion
	
	public PWASTablesDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["PWAS_DBConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public PWASTablesDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public PWASTablesDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public PWASTablesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public PWASTablesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<Role> Roles
	{
		get
		{
			return this.GetTable<Role>();
		}
	}
	
	public System.Data.Linq.Table<RolePermission> RolePermissions
	{
		get
		{
			return this.GetTable<RolePermission>();
		}
	}
	
	public System.Data.Linq.Table<User> Users
	{
		get
		{
			return this.GetTable<User>();
		}
	}
	
	public System.Data.Linq.Table<Order> Orders
	{
		get
		{
			return this.GetTable<Order>();
		}
	}
	
	public System.Data.Linq.Table<PrintRun> PrintRuns
	{
		get
		{
			return this.GetTable<PrintRun>();
		}
	}
}

[Table(Name="dbo.Role")]
public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _roleID;
	
	private string _role_name;
	
	private string _role_desc;
	
	private EntitySet<RolePermission> _RolePermissions;
	
	private EntitySet<User> _Users;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnroleIDChanging(int value);
    partial void OnroleIDChanged();
    partial void Onrole_nameChanging(string value);
    partial void Onrole_nameChanged();
    partial void Onrole_descChanging(string value);
    partial void Onrole_descChanged();
    #endregion
	
	public Role()
	{
		this._RolePermissions = new EntitySet<RolePermission>(new Action<RolePermission>(this.attach_RolePermissions), new Action<RolePermission>(this.detach_RolePermissions));
		this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
		OnCreated();
	}
	
	[Column(Storage="_roleID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int roleID
	{
		get
		{
			return this._roleID;
		}
		set
		{
			if ((this._roleID != value))
			{
				this.OnroleIDChanging(value);
				this.SendPropertyChanging();
				this._roleID = value;
				this.SendPropertyChanged("roleID");
				this.OnroleIDChanged();
			}
		}
	}
	
	[Column(Storage="_role_name", DbType="NChar(25) NOT NULL", CanBeNull=false)]
	public string role_name
	{
		get
		{
			return this._role_name;
		}
		set
		{
			if ((this._role_name != value))
			{
				this.Onrole_nameChanging(value);
				this.SendPropertyChanging();
				this._role_name = value;
				this.SendPropertyChanged("role_name");
				this.Onrole_nameChanged();
			}
		}
	}
	
	[Column(Storage="_role_desc", DbType="Text", UpdateCheck=UpdateCheck.Never)]
	public string role_desc
	{
		get
		{
			return this._role_desc;
		}
		set
		{
			if ((this._role_desc != value))
			{
				this.Onrole_descChanging(value);
				this.SendPropertyChanging();
				this._role_desc = value;
				this.SendPropertyChanged("role_desc");
				this.Onrole_descChanged();
			}
		}
	}
	
	[Association(Name="Role_RolePermission", Storage="_RolePermissions", OtherKey="roleID")]
	public EntitySet<RolePermission> RolePermissions
	{
		get
		{
			return this._RolePermissions;
		}
		set
		{
			this._RolePermissions.Assign(value);
		}
	}
	
	[Association(Name="Role_User", Storage="_Users", OtherKey="roleID")]
	public EntitySet<User> Users
	{
		get
		{
			return this._Users;
		}
		set
		{
			this._Users.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_RolePermissions(RolePermission entity)
	{
		this.SendPropertyChanging();
		entity.Role = this;
	}
	
	private void detach_RolePermissions(RolePermission entity)
	{
		this.SendPropertyChanging();
		entity.Role = null;
	}
	
	private void attach_Users(User entity)
	{
		this.SendPropertyChanging();
		entity.Role = this;
	}
	
	private void detach_Users(User entity)
	{
		this.SendPropertyChanging();
		entity.Role = null;
	}
}

[Table(Name="dbo.RolePermission")]
public partial class RolePermission : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _permissionID;
	
	private int _roleID;
	
	private string _object;
	
	private int _obj_update;
	
	private int _obj_view;
	
	private int _obj_create;
	
	private int _obj_delete;
	
	private EntityRef<Role> _Role;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnpermissionIDChanging(int value);
    partial void OnpermissionIDChanged();
    partial void OnroleIDChanging(int value);
    partial void OnroleIDChanged();
    partial void OnobjectChanging(string value);
    partial void OnobjectChanged();
    partial void Onobj_updateChanging(int value);
    partial void Onobj_updateChanged();
    partial void Onobj_viewChanging(int value);
    partial void Onobj_viewChanged();
    partial void Onobj_createChanging(int value);
    partial void Onobj_createChanged();
    partial void Onobj_deleteChanging(int value);
    partial void Onobj_deleteChanged();
    #endregion
	
	public RolePermission()
	{
		this._Role = default(EntityRef<Role>);
		OnCreated();
	}
	
	[Column(Storage="_permissionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int permissionID
	{
		get
		{
			return this._permissionID;
		}
		set
		{
			if ((this._permissionID != value))
			{
				this.OnpermissionIDChanging(value);
				this.SendPropertyChanging();
				this._permissionID = value;
				this.SendPropertyChanged("permissionID");
				this.OnpermissionIDChanged();
			}
		}
	}
	
	[Column(Storage="_roleID", DbType="Int NOT NULL")]
	public int roleID
	{
		get
		{
			return this._roleID;
		}
		set
		{
			if ((this._roleID != value))
			{
				if (this._Role.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnroleIDChanging(value);
				this.SendPropertyChanging();
				this._roleID = value;
				this.SendPropertyChanged("roleID");
				this.OnroleIDChanged();
			}
		}
	}
	
	[Column(Name="object", Storage="_object", DbType="NChar(5) NOT NULL", CanBeNull=false)]
	public string @object
	{
		get
		{
			return this._object;
		}
		set
		{
			if ((this._object != value))
			{
				this.OnobjectChanging(value);
				this.SendPropertyChanging();
				this._object = value;
				this.SendPropertyChanged("@object");
				this.OnobjectChanged();
			}
		}
	}
	
	[Column(Storage="_obj_update", DbType="Int NOT NULL")]
	public int obj_update
	{
		get
		{
			return this._obj_update;
		}
		set
		{
			if ((this._obj_update != value))
			{
				this.Onobj_updateChanging(value);
				this.SendPropertyChanging();
				this._obj_update = value;
				this.SendPropertyChanged("obj_update");
				this.Onobj_updateChanged();
			}
		}
	}
	
	[Column(Storage="_obj_view", DbType="Int NOT NULL")]
	public int obj_view
	{
		get
		{
			return this._obj_view;
		}
		set
		{
			if ((this._obj_view != value))
			{
				this.Onobj_viewChanging(value);
				this.SendPropertyChanging();
				this._obj_view = value;
				this.SendPropertyChanged("obj_view");
				this.Onobj_viewChanged();
			}
		}
	}
	
	[Column(Storage="_obj_create", DbType="Int NOT NULL")]
	public int obj_create
	{
		get
		{
			return this._obj_create;
		}
		set
		{
			if ((this._obj_create != value))
			{
				this.Onobj_createChanging(value);
				this.SendPropertyChanging();
				this._obj_create = value;
				this.SendPropertyChanged("obj_create");
				this.Onobj_createChanged();
			}
		}
	}
	
	[Column(Storage="_obj_delete", DbType="Int NOT NULL")]
	public int obj_delete
	{
		get
		{
			return this._obj_delete;
		}
		set
		{
			if ((this._obj_delete != value))
			{
				this.Onobj_deleteChanging(value);
				this.SendPropertyChanging();
				this._obj_delete = value;
				this.SendPropertyChanged("obj_delete");
				this.Onobj_deleteChanged();
			}
		}
	}
	
	[Association(Name="Role_RolePermission", Storage="_Role", ThisKey="roleID", IsForeignKey=true)]
	public Role Role
	{
		get
		{
			return this._Role.Entity;
		}
		set
		{
			Role previousValue = this._Role.Entity;
			if (((previousValue != value) 
						|| (this._Role.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Role.Entity = null;
					previousValue.RolePermissions.Remove(this);
				}
				this._Role.Entity = value;
				if ((value != null))
				{
					value.RolePermissions.Add(this);
					this._roleID = value.roleID;
				}
				else
				{
					this._roleID = default(int);
				}
				this.SendPropertyChanged("Role");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.[User]")]
public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _userID;
	
	private string _firstName;
	
	private string _lastName;
	
	private string _company;
	
	private string _email;
	
	private string _homePhone;
	
	private string _otherPhone;
	
	private string _s_address1;
	
	private string _s_address2;
	
	private string _s_city;
	
	private string _s_state;
	
	private string _s_zip;
	
	private string _cc_num;
	
	private string _cc_type;
	
	private string _exp_date;
	
	private string _b_address1;
	
	private string _b_address2;
	
	private string _b_city;
	
	private string _b_state;
	
	private string _b_zip;
	
	private int _roleID;
	
	private EntitySet<Order> _Orders;
	
	private EntityRef<Role> _Role;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuserIDChanging(int value);
    partial void OnuserIDChanged();
    partial void OnfirstNameChanging(string value);
    partial void OnfirstNameChanged();
    partial void OnlastNameChanging(string value);
    partial void OnlastNameChanged();
    partial void OncompanyChanging(string value);
    partial void OncompanyChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnhomePhoneChanging(string value);
    partial void OnhomePhoneChanged();
    partial void OnotherPhoneChanging(string value);
    partial void OnotherPhoneChanged();
    partial void Ons_address1Changing(string value);
    partial void Ons_address1Changed();
    partial void Ons_address2Changing(string value);
    partial void Ons_address2Changed();
    partial void Ons_cityChanging(string value);
    partial void Ons_cityChanged();
    partial void Ons_stateChanging(string value);
    partial void Ons_stateChanged();
    partial void Ons_zipChanging(string value);
    partial void Ons_zipChanged();
    partial void Oncc_numChanging(string value);
    partial void Oncc_numChanged();
    partial void Oncc_typeChanging(string value);
    partial void Oncc_typeChanged();
    partial void Onexp_dateChanging(string value);
    partial void Onexp_dateChanged();
    partial void Onb_address1Changing(string value);
    partial void Onb_address1Changed();
    partial void Onb_address2Changing(string value);
    partial void Onb_address2Changed();
    partial void Onb_cityChanging(string value);
    partial void Onb_cityChanged();
    partial void Onb_stateChanging(string value);
    partial void Onb_stateChanged();
    partial void Onb_zipChanging(string value);
    partial void Onb_zipChanged();
    partial void OnroleIDChanging(int value);
    partial void OnroleIDChanged();
    #endregion
	
	public User()
	{
		this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
		this._Role = default(EntityRef<Role>);
		OnCreated();
	}
	
	[Column(Storage="_userID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int userID
	{
		get
		{
			return this._userID;
		}
		set
		{
			if ((this._userID != value))
			{
				this.OnuserIDChanging(value);
				this.SendPropertyChanging();
				this._userID = value;
				this.SendPropertyChanged("userID");
				this.OnuserIDChanged();
			}
		}
	}
	
	[Column(Storage="_firstName", DbType="NChar(25) NOT NULL", CanBeNull=false)]
	public string firstName
	{
		get
		{
			return this._firstName;
		}
		set
		{
			if ((this._firstName != value))
			{
				this.OnfirstNameChanging(value);
				this.SendPropertyChanging();
				this._firstName = value;
				this.SendPropertyChanged("firstName");
				this.OnfirstNameChanged();
			}
		}
	}
	
	[Column(Storage="_lastName", DbType="NChar(30) NOT NULL", CanBeNull=false)]
	public string lastName
	{
		get
		{
			return this._lastName;
		}
		set
		{
			if ((this._lastName != value))
			{
				this.OnlastNameChanging(value);
				this.SendPropertyChanging();
				this._lastName = value;
				this.SendPropertyChanged("lastName");
				this.OnlastNameChanged();
			}
		}
	}
	
	[Column(Storage="_company", DbType="NChar(20)")]
	public string company
	{
		get
		{
			return this._company;
		}
		set
		{
			if ((this._company != value))
			{
				this.OncompanyChanging(value);
				this.SendPropertyChanging();
				this._company = value;
				this.SendPropertyChanged("company");
				this.OncompanyChanged();
			}
		}
	}
	
	[Column(Storage="_email", DbType="NChar(50) NOT NULL", CanBeNull=false)]
	public string email
	{
		get
		{
			return this._email;
		}
		set
		{
			if ((this._email != value))
			{
				this.OnemailChanging(value);
				this.SendPropertyChanging();
				this._email = value;
				this.SendPropertyChanged("email");
				this.OnemailChanged();
			}
		}
	}
	
	[Column(Storage="_homePhone", DbType="NChar(12) NOT NULL", CanBeNull=false)]
	public string homePhone
	{
		get
		{
			return this._homePhone;
		}
		set
		{
			if ((this._homePhone != value))
			{
				this.OnhomePhoneChanging(value);
				this.SendPropertyChanging();
				this._homePhone = value;
				this.SendPropertyChanged("homePhone");
				this.OnhomePhoneChanged();
			}
		}
	}
	
	[Column(Storage="_otherPhone", DbType="NChar(12)")]
	public string otherPhone
	{
		get
		{
			return this._otherPhone;
		}
		set
		{
			if ((this._otherPhone != value))
			{
				this.OnotherPhoneChanging(value);
				this.SendPropertyChanging();
				this._otherPhone = value;
				this.SendPropertyChanged("otherPhone");
				this.OnotherPhoneChanged();
			}
		}
	}
	
	[Column(Storage="_s_address1", DbType="NChar(50) NOT NULL", CanBeNull=false)]
	public string s_address1
	{
		get
		{
			return this._s_address1;
		}
		set
		{
			if ((this._s_address1 != value))
			{
				this.Ons_address1Changing(value);
				this.SendPropertyChanging();
				this._s_address1 = value;
				this.SendPropertyChanged("s_address1");
				this.Ons_address1Changed();
			}
		}
	}
	
	[Column(Storage="_s_address2", DbType="NChar(50)")]
	public string s_address2
	{
		get
		{
			return this._s_address2;
		}
		set
		{
			if ((this._s_address2 != value))
			{
				this.Ons_address2Changing(value);
				this.SendPropertyChanging();
				this._s_address2 = value;
				this.SendPropertyChanged("s_address2");
				this.Ons_address2Changed();
			}
		}
	}
	
	[Column(Storage="_s_city", DbType="NChar(30) NOT NULL", CanBeNull=false)]
	public string s_city
	{
		get
		{
			return this._s_city;
		}
		set
		{
			if ((this._s_city != value))
			{
				this.Ons_cityChanging(value);
				this.SendPropertyChanging();
				this._s_city = value;
				this.SendPropertyChanged("s_city");
				this.Ons_cityChanged();
			}
		}
	}
	
	[Column(Storage="_s_state", DbType="NChar(2) NOT NULL", CanBeNull=false)]
	public string s_state
	{
		get
		{
			return this._s_state;
		}
		set
		{
			if ((this._s_state != value))
			{
				this.Ons_stateChanging(value);
				this.SendPropertyChanging();
				this._s_state = value;
				this.SendPropertyChanged("s_state");
				this.Ons_stateChanged();
			}
		}
	}
	
	[Column(Storage="_s_zip", DbType="NChar(5) NOT NULL", CanBeNull=false)]
	public string s_zip
	{
		get
		{
			return this._s_zip;
		}
		set
		{
			if ((this._s_zip != value))
			{
				this.Ons_zipChanging(value);
				this.SendPropertyChanging();
				this._s_zip = value;
				this.SendPropertyChanged("s_zip");
				this.Ons_zipChanged();
			}
		}
	}
	
	[Column(Storage="_cc_num", DbType="NChar(20)")]
	public string cc_num
	{
		get
		{
			return this._cc_num;
		}
		set
		{
			if ((this._cc_num != value))
			{
				this.Oncc_numChanging(value);
				this.SendPropertyChanging();
				this._cc_num = value;
				this.SendPropertyChanged("cc_num");
				this.Oncc_numChanged();
			}
		}
	}
	
	[Column(Storage="_cc_type", DbType="NChar(2)")]
	public string cc_type
	{
		get
		{
			return this._cc_type;
		}
		set
		{
			if ((this._cc_type != value))
			{
				this.Oncc_typeChanging(value);
				this.SendPropertyChanging();
				this._cc_type = value;
				this.SendPropertyChanged("cc_type");
				this.Oncc_typeChanged();
			}
		}
	}
	
	[Column(Storage="_exp_date", DbType="NChar(6)")]
	public string exp_date
	{
		get
		{
			return this._exp_date;
		}
		set
		{
			if ((this._exp_date != value))
			{
				this.Onexp_dateChanging(value);
				this.SendPropertyChanging();
				this._exp_date = value;
				this.SendPropertyChanged("exp_date");
				this.Onexp_dateChanged();
			}
		}
	}
	
	[Column(Storage="_b_address1", DbType="NChar(50) NOT NULL", CanBeNull=false)]
	public string b_address1
	{
		get
		{
			return this._b_address1;
		}
		set
		{
			if ((this._b_address1 != value))
			{
				this.Onb_address1Changing(value);
				this.SendPropertyChanging();
				this._b_address1 = value;
				this.SendPropertyChanged("b_address1");
				this.Onb_address1Changed();
			}
		}
	}
	
	[Column(Storage="_b_address2", DbType="NChar(50)")]
	public string b_address2
	{
		get
		{
			return this._b_address2;
		}
		set
		{
			if ((this._b_address2 != value))
			{
				this.Onb_address2Changing(value);
				this.SendPropertyChanging();
				this._b_address2 = value;
				this.SendPropertyChanged("b_address2");
				this.Onb_address2Changed();
			}
		}
	}
	
	[Column(Storage="_b_city", DbType="NChar(30) NOT NULL", CanBeNull=false)]
	public string b_city
	{
		get
		{
			return this._b_city;
		}
		set
		{
			if ((this._b_city != value))
			{
				this.Onb_cityChanging(value);
				this.SendPropertyChanging();
				this._b_city = value;
				this.SendPropertyChanged("b_city");
				this.Onb_cityChanged();
			}
		}
	}
	
	[Column(Storage="_b_state", DbType="NChar(2) NOT NULL", CanBeNull=false)]
	public string b_state
	{
		get
		{
			return this._b_state;
		}
		set
		{
			if ((this._b_state != value))
			{
				this.Onb_stateChanging(value);
				this.SendPropertyChanging();
				this._b_state = value;
				this.SendPropertyChanged("b_state");
				this.Onb_stateChanged();
			}
		}
	}
	
	[Column(Storage="_b_zip", DbType="NChar(5) NOT NULL", CanBeNull=false)]
	public string b_zip
	{
		get
		{
			return this._b_zip;
		}
		set
		{
			if ((this._b_zip != value))
			{
				this.Onb_zipChanging(value);
				this.SendPropertyChanging();
				this._b_zip = value;
				this.SendPropertyChanged("b_zip");
				this.Onb_zipChanged();
			}
		}
	}
	
	[Column(Storage="_roleID", DbType="Int NOT NULL")]
	public int roleID
	{
		get
		{
			return this._roleID;
		}
		set
		{
			if ((this._roleID != value))
			{
				if (this._Role.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnroleIDChanging(value);
				this.SendPropertyChanging();
				this._roleID = value;
				this.SendPropertyChanged("roleID");
				this.OnroleIDChanged();
			}
		}
	}
	
	[Association(Name="User_Order", Storage="_Orders", OtherKey="userID")]
	public EntitySet<Order> Orders
	{
		get
		{
			return this._Orders;
		}
		set
		{
			this._Orders.Assign(value);
		}
	}
	
	[Association(Name="Role_User", Storage="_Role", ThisKey="roleID", IsForeignKey=true)]
	public Role Role
	{
		get
		{
			return this._Role.Entity;
		}
		set
		{
			Role previousValue = this._Role.Entity;
			if (((previousValue != value) 
						|| (this._Role.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Role.Entity = null;
					previousValue.Users.Remove(this);
				}
				this._Role.Entity = value;
				if ((value != null))
				{
					value.Users.Add(this);
					this._roleID = value.roleID;
				}
				else
				{
					this._roleID = default(int);
				}
				this.SendPropertyChanged("Role");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Orders(Order entity)
	{
		this.SendPropertyChanging();
		entity.User = this;
	}
	
	private void detach_Orders(Order entity)
	{
		this.SendPropertyChanging();
		entity.User = null;
	}
}

[Table(Name="dbo.[Order]")]
public partial class Order : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _orderID;
	
	private int _userID;
	
	private System.Nullable<int> _runID;
	
	private string _job_name;
	
	private double _width;
	
	private double _height;
	
	private int _quantity;
	
	private string _stock_finish;
	
	private string _stock_weight;
	
	private bool _two_sided;
	
	private bool _folded;
	
	private bool _ship;
	
	private EntityRef<User> _User;
	
	private EntityRef<PrintRun> _PrintRun;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnorderIDChanging(int value);
    partial void OnorderIDChanged();
    partial void OnuserIDChanging(int value);
    partial void OnuserIDChanged();
    partial void OnrunIDChanging(System.Nullable<int> value);
    partial void OnrunIDChanged();
    partial void Onjob_nameChanging(string value);
    partial void Onjob_nameChanged();
    partial void OnwidthChanging(double value);
    partial void OnwidthChanged();
    partial void OnheightChanging(double value);
    partial void OnheightChanged();
    partial void OnquantityChanging(int value);
    partial void OnquantityChanged();
    partial void Onstock_finishChanging(string value);
    partial void Onstock_finishChanged();
    partial void Onstock_weightChanging(string value);
    partial void Onstock_weightChanged();
    partial void Ontwo_sidedChanging(bool value);
    partial void Ontwo_sidedChanged();
    partial void OnfoldedChanging(bool value);
    partial void OnfoldedChanged();
    partial void OnshipChanging(bool value);
    partial void OnshipChanged();
    #endregion
	
	public Order()
	{
		this._User = default(EntityRef<User>);
		this._PrintRun = default(EntityRef<PrintRun>);
		OnCreated();
	}
	
	[Column(Storage="_orderID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int orderID
	{
		get
		{
			return this._orderID;
		}
		set
		{
			if ((this._orderID != value))
			{
				this.OnorderIDChanging(value);
				this.SendPropertyChanging();
				this._orderID = value;
				this.SendPropertyChanged("orderID");
				this.OnorderIDChanged();
			}
		}
	}
	
	[Column(Storage="_userID", DbType="Int NOT NULL")]
	public int userID
	{
		get
		{
			return this._userID;
		}
		set
		{
			if ((this._userID != value))
			{
				if (this._User.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnuserIDChanging(value);
				this.SendPropertyChanging();
				this._userID = value;
				this.SendPropertyChanged("userID");
				this.OnuserIDChanged();
			}
		}
	}
	
	[Column(Storage="_runID", DbType="Int")]
	public System.Nullable<int> runID
	{
		get
		{
			return this._runID;
		}
		set
		{
			if ((this._runID != value))
			{
				if (this._PrintRun.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnrunIDChanging(value);
				this.SendPropertyChanging();
				this._runID = value;
				this.SendPropertyChanged("runID");
				this.OnrunIDChanged();
			}
		}
	}
	
	[Column(Storage="_job_name", DbType="NChar(50) NOT NULL", CanBeNull=false)]
	public string job_name
	{
		get
		{
			return this._job_name;
		}
		set
		{
			if ((this._job_name != value))
			{
				this.Onjob_nameChanging(value);
				this.SendPropertyChanging();
				this._job_name = value;
				this.SendPropertyChanged("job_name");
				this.Onjob_nameChanged();
			}
		}
	}
	
	[Column(Storage="_width", DbType="Float NOT NULL")]
	public double width
	{
		get
		{
			return this._width;
		}
		set
		{
			if ((this._width != value))
			{
				this.OnwidthChanging(value);
				this.SendPropertyChanging();
				this._width = value;
				this.SendPropertyChanged("width");
				this.OnwidthChanged();
			}
		}
	}
	
	[Column(Storage="_height", DbType="Float NOT NULL")]
	public double height
	{
		get
		{
			return this._height;
		}
		set
		{
			if ((this._height != value))
			{
				this.OnheightChanging(value);
				this.SendPropertyChanging();
				this._height = value;
				this.SendPropertyChanged("height");
				this.OnheightChanged();
			}
		}
	}
	
	[Column(Storage="_quantity", DbType="Int NOT NULL")]
	public int quantity
	{
		get
		{
			return this._quantity;
		}
		set
		{
			if ((this._quantity != value))
			{
				this.OnquantityChanging(value);
				this.SendPropertyChanging();
				this._quantity = value;
				this.SendPropertyChanged("quantity");
				this.OnquantityChanged();
			}
		}
	}
	
	[Column(Storage="_stock_finish", DbType="NChar(30) NOT NULL", CanBeNull=false)]
	public string stock_finish
	{
		get
		{
			return this._stock_finish;
		}
		set
		{
			if ((this._stock_finish != value))
			{
				this.Onstock_finishChanging(value);
				this.SendPropertyChanging();
				this._stock_finish = value;
				this.SendPropertyChanged("stock_finish");
				this.Onstock_finishChanged();
			}
		}
	}
	
	[Column(Storage="_stock_weight", DbType="NChar(30) NOT NULL", CanBeNull=false)]
	public string stock_weight
	{
		get
		{
			return this._stock_weight;
		}
		set
		{
			if ((this._stock_weight != value))
			{
				this.Onstock_weightChanging(value);
				this.SendPropertyChanging();
				this._stock_weight = value;
				this.SendPropertyChanged("stock_weight");
				this.Onstock_weightChanged();
			}
		}
	}
	
	[Column(Storage="_two_sided", DbType="Bit NOT NULL")]
	public bool two_sided
	{
		get
		{
			return this._two_sided;
		}
		set
		{
			if ((this._two_sided != value))
			{
				this.Ontwo_sidedChanging(value);
				this.SendPropertyChanging();
				this._two_sided = value;
				this.SendPropertyChanged("two_sided");
				this.Ontwo_sidedChanged();
			}
		}
	}
	
	[Column(Storage="_folded", DbType="Bit NOT NULL")]
	public bool folded
	{
		get
		{
			return this._folded;
		}
		set
		{
			if ((this._folded != value))
			{
				this.OnfoldedChanging(value);
				this.SendPropertyChanging();
				this._folded = value;
				this.SendPropertyChanged("folded");
				this.OnfoldedChanged();
			}
		}
	}
	
	[Column(Storage="_ship", DbType="Bit NOT NULL")]
	public bool ship
	{
		get
		{
			return this._ship;
		}
		set
		{
			if ((this._ship != value))
			{
				this.OnshipChanging(value);
				this.SendPropertyChanging();
				this._ship = value;
				this.SendPropertyChanged("ship");
				this.OnshipChanged();
			}
		}
	}
	
	[Association(Name="User_Order", Storage="_User", ThisKey="userID", IsForeignKey=true)]
	public User User
	{
		get
		{
			return this._User.Entity;
		}
		set
		{
			User previousValue = this._User.Entity;
			if (((previousValue != value) 
						|| (this._User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User.Entity = null;
					previousValue.Orders.Remove(this);
				}
				this._User.Entity = value;
				if ((value != null))
				{
					value.Orders.Add(this);
					this._userID = value.userID;
				}
				else
				{
					this._userID = default(int);
				}
				this.SendPropertyChanged("User");
			}
		}
	}
	
	[Association(Name="PrintRun_Order", Storage="_PrintRun", ThisKey="runID", IsForeignKey=true)]
	public PrintRun PrintRun
	{
		get
		{
			return this._PrintRun.Entity;
		}
		set
		{
			PrintRun previousValue = this._PrintRun.Entity;
			if (((previousValue != value) 
						|| (this._PrintRun.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._PrintRun.Entity = null;
					previousValue.Orders.Remove(this);
				}
				this._PrintRun.Entity = value;
				if ((value != null))
				{
					value.Orders.Add(this);
					this._runID = value.runID;
				}
				else
				{
					this._runID = default(Nullable<int>);
				}
				this.SendPropertyChanged("PrintRun");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.PrintRun")]
public partial class PrintRun : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _runID;
	
	private double _height;
	
	private double _width;
	
	private int _quantity;
	
	private string _stock_finish;
	
	private string _stock_weight;
	
	private EntitySet<Order> _Orders;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnrunIDChanging(int value);
    partial void OnrunIDChanged();
    partial void OnheightChanging(double value);
    partial void OnheightChanged();
    partial void OnwidthChanging(double value);
    partial void OnwidthChanged();
    partial void OnquantityChanging(int value);
    partial void OnquantityChanged();
    partial void Onstock_finishChanging(string value);
    partial void Onstock_finishChanged();
    partial void Onstock_weightChanging(string value);
    partial void Onstock_weightChanged();
    #endregion
	
	public PrintRun()
	{
		this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
		OnCreated();
	}
	
	[Column(Storage="_runID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int runID
	{
		get
		{
			return this._runID;
		}
		set
		{
			if ((this._runID != value))
			{
				this.OnrunIDChanging(value);
				this.SendPropertyChanging();
				this._runID = value;
				this.SendPropertyChanged("runID");
				this.OnrunIDChanged();
			}
		}
	}
	
	[Column(Storage="_height", DbType="Float NOT NULL")]
	public double height
	{
		get
		{
			return this._height;
		}
		set
		{
			if ((this._height != value))
			{
				this.OnheightChanging(value);
				this.SendPropertyChanging();
				this._height = value;
				this.SendPropertyChanged("height");
				this.OnheightChanged();
			}
		}
	}
	
	[Column(Storage="_width", DbType="Float NOT NULL")]
	public double width
	{
		get
		{
			return this._width;
		}
		set
		{
			if ((this._width != value))
			{
				this.OnwidthChanging(value);
				this.SendPropertyChanging();
				this._width = value;
				this.SendPropertyChanged("width");
				this.OnwidthChanged();
			}
		}
	}
	
	[Column(Storage="_quantity", DbType="Int NOT NULL")]
	public int quantity
	{
		get
		{
			return this._quantity;
		}
		set
		{
			if ((this._quantity != value))
			{
				this.OnquantityChanging(value);
				this.SendPropertyChanging();
				this._quantity = value;
				this.SendPropertyChanged("quantity");
				this.OnquantityChanged();
			}
		}
	}
	
	[Column(Storage="_stock_finish", DbType="NChar(30) NOT NULL", CanBeNull=false)]
	public string stock_finish
	{
		get
		{
			return this._stock_finish;
		}
		set
		{
			if ((this._stock_finish != value))
			{
				this.Onstock_finishChanging(value);
				this.SendPropertyChanging();
				this._stock_finish = value;
				this.SendPropertyChanged("stock_finish");
				this.Onstock_finishChanged();
			}
		}
	}
	
	[Column(Storage="_stock_weight", DbType="NChar(30) NOT NULL", CanBeNull=false)]
	public string stock_weight
	{
		get
		{
			return this._stock_weight;
		}
		set
		{
			if ((this._stock_weight != value))
			{
				this.Onstock_weightChanging(value);
				this.SendPropertyChanging();
				this._stock_weight = value;
				this.SendPropertyChanged("stock_weight");
				this.Onstock_weightChanged();
			}
		}
	}
	
	[Association(Name="PrintRun_Order", Storage="_Orders", OtherKey="runID")]
	public EntitySet<Order> Orders
	{
		get
		{
			return this._Orders;
		}
		set
		{
			this._Orders.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Orders(Order entity)
	{
		this.SendPropertyChanging();
		entity.PrintRun = this;
	}
	
	private void detach_Orders(Order entity)
	{
		this.SendPropertyChanging();
		entity.PrintRun = null;
	}
}
#pragma warning restore 1591
